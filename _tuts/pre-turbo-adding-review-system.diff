diff --git a/migrations/Version20210512155409.php b/migrations/Version20210512155409.php
new file mode 100644
index 0000000..2c17c9c
--- /dev/null
+++ b/migrations/Version20210512155409.php
@@ -0,0 +1,33 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+final class Version20210512155409 extends AbstractMigration
+{
+    public function getDescription() : string
+    {
+        return '';
+    }
+
+    public function up(Schema $schema) : void
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->addSql('CREATE TABLE review (id INT AUTO_INCREMENT NOT NULL, owner_id INT NOT NULL, product_id INT NOT NULL, content LONGTEXT NOT NULL, stars INT NOT NULL, INDEX IDX_794381C67E3C61F9 (owner_id), INDEX IDX_794381C64584665A (product_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
+        $this->addSql('ALTER TABLE review ADD CONSTRAINT FK_794381C67E3C61F9 FOREIGN KEY (owner_id) REFERENCES user (id)');
+        $this->addSql('ALTER TABLE review ADD CONSTRAINT FK_794381C64584665A FOREIGN KEY (product_id) REFERENCES product (id)');
+    }
+
+    public function down(Schema $schema) : void
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->addSql('DROP TABLE review');
+    }
+}
diff --git a/src/Controller/ProductController.php b/src/Controller/ProductController.php
index 91aecaf..53bc281 100644
--- a/src/Controller/ProductController.php
+++ b/src/Controller/ProductController.php
@@ -4,9 +4,12 @@ namespace App\Controller;
 
 use App\Entity\Category;
 use App\Entity\Product;
+use App\Entity\Review;
 use App\Form\AddItemToCartFormType;
+use App\Form\ReviewForm;
 use App\Repository\CategoryRepository;
 use App\Repository\ProductRepository;
+use Doctrine\ORM\EntityManagerInterface;
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\Routing\Annotation\Route;
@@ -49,11 +52,49 @@ class ProductController extends AbstractController
             'product' => $product
         ]);
 
+        $reviewForm = null;
+        if ($this->getUser()) {
+            $reviewForm = $this->createForm(ReviewForm::class, new Review($this->getUser(), $product));
+        }
+
         return $this->render('product/show.html.twig', [
             'product' => $product,
             'currentCategory' => $product->getCategory(),
             'categories' => $categoryRepository->findAll(),
-            'addToCartForm' => $addToCartForm->createView()
+            'addToCartForm' => $addToCartForm->createView(),
+            'reviewForm' => $reviewForm ? $reviewForm->createView() : null,
+        ]);
+    }
+
+    /**
+     * @Route("/product/{id}/reviews", name="app_product_reviews")
+     */
+    public function productReviews(Product $product, CategoryRepository $categoryRepository, Request $request, EntityManagerInterface $entityManager)
+    {
+        $reviewForm = null;
+        if ($request->isMethod('POST')) {
+            $this->denyAccessUnlessGranted('ROLE_USER');
+            $reviewForm = $this->createForm(ReviewForm::class, new Review($this->getUser(), $product));
+
+            $reviewForm->handleRequest($request);
+
+            if ($reviewForm->isSubmitted() && $reviewForm->isValid()) {
+                $entityManager->persist($reviewForm->getData());
+                $entityManager->flush();
+
+                $this->addFlash('success', 'Thanks for your review! I like you!');
+
+                return $this->redirectToRoute('app_product_reviews', [
+                    'id' => $product->getId(),
+                ]);
+            }
+        }
+
+        return $this->render('product/reviews.html.twig', [
+            'product' => $product,
+            'currentCategory' => $product->getCategory(),
+            'categories' => $categoryRepository->findAll(),
+            'reviewForm' => $reviewForm ? $reviewForm->createView() : null,
         ]);
     }
 
diff --git a/src/DataFixtures/AppFixtures.php b/src/DataFixtures/AppFixtures.php
index abc1be9..7aab59d 100644
--- a/src/DataFixtures/AppFixtures.php
+++ b/src/DataFixtures/AppFixtures.php
@@ -5,6 +5,7 @@ namespace App\DataFixtures;
 use App\Entity\Category;
 use App\Entity\Color;
 use App\Entity\Product;
+use App\Entity\Review;
 use App\Entity\User;
 use Doctrine\Bundle\FixturesBundle\Fixture;
 use Doctrine\Persistence\ObjectManager;
@@ -51,6 +52,12 @@ class AppFixtures extends Fixture
             'break_room' => $category3,
         ];
 
+        $user = new User();
+        $user->setEmail('shopper@example.com');
+        $user->setPassword($this->passwordHasher->hashPassword($user, 'buy'));
+
+        $manager->persist($user);
+
         $brands = [
             'Faux-Trendster',
             'Low End Luxury',
@@ -73,6 +80,14 @@ class AppFixtures extends Fixture
                 $product->addColor($colorGreen);
             }
 
+            $reviewCount = rand(1, 2);
+            for ($i = 0; $i < $reviewCount; $i++) {
+                $review = new Review($user, $product);
+                $review->setStars(rand(1, 5));
+                $review->setContent('It worked... like... pretty well I guess!');
+                $manager->persist($review);
+            }
+
             $manager->persist($product);
         }
 
@@ -82,12 +97,6 @@ class AppFixtures extends Fixture
         $fs->mirror(__DIR__.'/uploads', $target);
         $fs->chmod($target, 0777);
 
-        $user = new User();
-        $user->setEmail('shopper@example.com');
-        $user->setPassword($this->passwordHasher->hashPassword($user, 'buy'));
-
-        $manager->persist($user);
-
         $manager->flush();
     }
 
diff --git a/src/Entity/Product.php b/src/Entity/Product.php
index d100c51..c160e54 100644
--- a/src/Entity/Product.php
+++ b/src/Entity/Product.php
@@ -77,9 +77,15 @@ class Product
      */
     private $imageFilename = 'floppy-disc.png';
 
+    /**
+     * @ORM\OneToMany(targetEntity=Review::class, mappedBy="product", cascade={"remove"})
+     */
+    private $reviews;
+
     public function __construct()
     {
         $this->colors = new ArrayCollection();
+        $this->reviews = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -226,4 +232,32 @@ class Product
     {
         return sprintf('/uploads/products/'.$this->imageFilename);
     }
+
+    /**
+     * @return Collection|Review[]
+     */
+    public function getReviews(): Collection
+    {
+        return $this->reviews;
+    }
+
+    public function getAverageStars(): float
+    {
+        if (count($this->getReviews()) === 0) {
+            return 0;
+        }
+
+        $totalRating = 0;
+        // this is an inefficient way of doing this ;)
+        foreach ($this->getReviews() as $review) {
+            $totalRating += $review->getStars();
+        }
+
+        return round($totalRating / count($this->getReviews()), 1);
+    }
+
+    public function __toString(): string
+    {
+        return sprintf('%s ($%s)', $this->name, $this->getPriceString());
+    }
 }
diff --git a/src/Entity/Review.php b/src/Entity/Review.php
new file mode 100644
index 0000000..418b4a0
--- /dev/null
+++ b/src/Entity/Review.php
@@ -0,0 +1,101 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\ReviewRepository;
+use Doctrine\ORM\Mapping as ORM;
+use Symfony\Component\Validator\Constraints as Assert;
+
+/**
+ * @ORM\Entity(repositoryClass=ReviewRepository::class)
+ */
+class Review
+{
+    /**
+     * @ORM\Id
+     * @ORM\GeneratedValue
+     * @ORM\Column(type="integer")
+     */
+    private ?int $id;
+
+    /**
+     * @ORM\Column(type="text")
+     * @Assert\NotBlank(message="Tell us what you thought about the product")
+     * @Assert\Length(min="20", minMessage="Please tell us a bit more!")
+     */
+    private ?string $content;
+
+    /**
+     * @ORM\ManyToOne(targetEntity=User::class, inversedBy="reviews")
+     * @ORM\JoinColumn(nullable=false)
+     */
+    private User $owner;
+
+    /**
+     * @ORM\ManyToOne(targetEntity=Product::class, inversedBy="reviews")
+     * @ORM\JoinColumn(nullable=false)
+     */
+    private Product $product;
+
+    /**
+     * @ORM\Column(type="integer")
+     * @Assert\GreaterThanOrEqual(1, message="It sounds terrible! But 1 is the minimum rating.")
+     * @Assert\LessThanOrEqual(5, message="I'm glad you love it! But 5 is the max rating.")
+     * @Assert\NotBlank(message="Please rate this!")
+     */
+    private ?int $stars;
+
+    public function __construct(User $owner, Product $product)
+    {
+        $this->owner = $owner;
+        $this->product = $product;
+    }
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getContent(): ?string
+    {
+        return $this->content;
+    }
+
+    public function getContentPreview(): string
+    {
+        if (strlen($this->content) < 50) {
+            return $this->content;
+        }
+
+        return substr($this->content, 0, 50).'...';
+    }
+
+    public function setContent(string $content): self
+    {
+        $this->content = $content;
+
+        return $this;
+    }
+
+    public function getOwner(): User
+    {
+        return $this->owner;
+    }
+
+    public function getProduct(): Product
+    {
+        return $this->product;
+    }
+
+    public function getStars(): ?int
+    {
+        return $this->stars;
+    }
+
+    public function setStars(int $stars): self
+    {
+        $this->stars = $stars;
+
+        return $this;
+    }
+}
diff --git a/src/Entity/User.php b/src/Entity/User.php
index 23f03ea..f5d8f83 100644
--- a/src/Entity/User.php
+++ b/src/Entity/User.php
@@ -2,6 +2,8 @@
 
 namespace App\Entity;
 
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
 use Doctrine\ORM\Mapping as ORM;
 use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
 use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
@@ -39,6 +41,16 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
      */
     private $password;
 
+    /**
+     * @ORM\OneToMany(targetEntity=Review::class, mappedBy="owner", orphanRemoval=true)
+     */
+    private $reviews;
+
+    public function __construct()
+    {
+        $this->reviews = new ArrayCollection();
+    }
+
     public function getId(): ?int
     {
         return $this->id;
@@ -116,4 +128,33 @@ class User implements UserInterface, PasswordAuthenticatedUserInterface
         // If you store any temporary, sensitive data on the user, clear it here
         // $this->plainPassword = null;
     }
+
+    /**
+     * @return Collection|Review[]
+     */
+    public function getReviews(): Collection
+    {
+        return $this->reviews;
+    }
+
+    public function addReview(Review $review): self
+    {
+        if (!$this->reviews->contains($review)) {
+            $this->reviews[] = $review;
+        }
+
+        return $this;
+    }
+
+    public function removeReview(Review $review): self
+    {
+        $this->reviews->removeElement($review);
+
+        return $this;
+    }
+
+    public function __toString(): string
+    {
+        return (string) $this->getEmail();
+    }
 }
diff --git a/src/Form/ReviewForm.php b/src/Form/ReviewForm.php
new file mode 100644
index 0000000..a9713ab
--- /dev/null
+++ b/src/Form/ReviewForm.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace App\Form;
+
+use App\Entity\Review;
+use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\Extension\Core\Type\IntegerType;
+use Symfony\Component\Form\Extension\Core\Type\TextareaType;
+use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\OptionsResolver\OptionsResolver;
+
+class ReviewForm extends AbstractType
+{
+    public function buildForm(FormBuilderInterface $builder, array $options)
+    {
+        $builder
+            ->add('content', TextareaType::class)
+            ->add('stars', IntegerType::class)
+        ;
+    }
+
+    public function configureOptions(OptionsResolver $resolver)
+    {
+        $resolver->setDefaults([
+            'data_class' => Review::class,
+        ]);
+    }
+}
diff --git a/src/Repository/ReviewRepository.php b/src/Repository/ReviewRepository.php
new file mode 100644
index 0000000..0de05ca
--- /dev/null
+++ b/src/Repository/ReviewRepository.php
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\Review;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @method Review|null find($id, $lockMode = null, $lockVersion = null)
+ * @method Review|null findOneBy(array $criteria, array $orderBy = null)
+ * @method Review[]    findAll()
+ * @method Review[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class ReviewRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, Review::class);
+    }
+
+    // /**
+    //  * @return Review[] Returns an array of Review objects
+    //  */
+    /*
+    public function findByExampleField($value)
+    {
+        return $this->createQueryBuilder('r')
+            ->andWhere('r.exampleField = :val')
+            ->setParameter('val', $value)
+            ->orderBy('r.id', 'ASC')
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult()
+        ;
+    }
+    */
+
+    /*
+    public function findOneBySomeField($value): ?Review
+    {
+        return $this->createQueryBuilder('r')
+            ->andWhere('r.exampleField = :val')
+            ->setParameter('val', $value)
+            ->getQuery()
+            ->getOneOrNullResult()
+        ;
+    }
+    */
+}
diff --git a/templates/product/_reviews.html.twig b/templates/product/_reviews.html.twig
new file mode 100644
index 0000000..36d39d8
--- /dev/null
+++ b/templates/product/_reviews.html.twig
@@ -0,0 +1,28 @@
+{% for review in product.reviews %}
+    <div>
+        <p>By {{ review.owner.email }} - {{ review.stars }}/5</p>
+        <div>
+            {{ review.content }}
+        </div>
+    </div>
+{% else %}
+    <p>This product has not been reviewed yet!</p>
+{% endfor %}
+
+<hr>
+
+{% if reviewForm|default(false) %}
+    <h4>Post your own review</h4>
+    {{ form_start(reviewForm, {
+        'action': path('app_product_reviews', { id: product.id })
+    }) }}
+        {{ form_row(reviewForm.stars) }}
+        {{ form_row(reviewForm.content) }}
+
+        <button class="btn btn-primary" formnovalidate>Add Review</button>
+    {{ form_end(reviewForm) }}
+{% elseif not is_granted('ROLE_USER') %}
+    <p><a href="{{ path('app_login') }}">Log in</a> to post a review</p>
+{% else %}
+    <div class="alert alert-success">Thanks for your review!</div>
+{% endif %}
diff --git a/templates/product/reviews.html.twig b/templates/product/reviews.html.twig
new file mode 100644
index 0000000..db18bc8
--- /dev/null
+++ b/templates/product/reviews.html.twig
@@ -0,0 +1,22 @@
+{% extends 'base.html.twig' %}
+
+{% block body %}
+    <div class="container-fluid mt-4">
+        <div class="row">
+            <aside class="col-xs-12 col-3">
+                {{ include('product/_categoriesSidebar.html.twig') }}
+            </aside>
+
+            <div class="col-xs-12 col-9 product-show">
+                <h1>
+                    Reviews for
+                    <a href="{{ path('app_product', { id: product.id }) }}">
+                        {{ product.name }}
+                    </a>
+                </h1>
+
+                {{ include('product/_reviews.html.twig') }}
+            </div>
+        </div>
+    </div>
+{% endblock %}
diff --git a/templates/product/show.html.twig b/templates/product/show.html.twig
index 138999b..e8b4f1b 100644
--- a/templates/product/show.html.twig
+++ b/templates/product/show.html.twig
@@ -2,8 +2,8 @@
 
 {% block productBody %}
     <h1>{{ product.name }}</h1>
-    <div class="row component-light product-show">
-        <div class="col-4 pt-3">
+    <div class="row component-light pt-3 product-show">
+        <div class="col-4">
             <img
                 alt="{{ product.name }}"
                 src="{{ asset('/uploads/products/'~product.imageFilename) }}"
@@ -14,13 +14,17 @@
                 <small class="d-inline">{{ product.brand }}</small>
             </div>
         </div>
-        <div class="col-8 p-3">
+        <div class="col-8 px-3">
             <div>
                 {{ product.description }}
             </div>
             <div class="row mt-4 align-items-center">
                 <div class="col-3">
                     Price: <strong>{{ product.priceString|format_currency('USD') }}</strong>
+                    <br>
+                    Reviews: <strong>{{ product.reviews|length }}</strong>
+                    <br/>
+                    Stars: <strong>{{ product.averageStars }}/5</strong>
                 </div>
                 <div class="col-9 p-3">
                     {{ include('product/_cart_add_controls.html.twig') }}
@@ -28,4 +32,10 @@
             </div>
         </div>
     </div>
+
+    <hr>
+
+    <h3>Reviews</h3>
+
+    {{ include('product/_reviews.html.twig') }}
 {% endblock %}
