diff --git a/assets/controllers/modal-form_controller.js b/assets/controllers/modal-form_controller.js
index 292ae5f..ad3b749 100644
--- a/assets/controllers/modal-form_controller.js
+++ b/assets/controllers/modal-form_controller.js
@@ -1,34 +1,12 @@
 import { Controller } from 'stimulus';
 import { Modal } from 'bootstrap';
-import * as Turbo from '@hotwired/turbo';
 
 export default class extends Controller {
     static targets = ['modal'];
     modal = null;
 
-    connect() {
-        this.boundBeforeFetchResponse = this.beforeFetchResponse.bind(this);
-        document.addEventListener('turbo:before-fetch-response', this.boundBeforeFetchResponse);
-    }
-
-    disconnect() {
-        document.removeEventListener('turbo:before-fetch-response', this.boundBeforeFetchResponse);
-    }
-
     async openModal(event) {
         this.modal = new Modal(this.modalTarget);
         this.modal.show();
     }
-
-    beforeFetchResponse(event) {
-        if (!this.modal || !this.modal._isShown) {
-            return;
-        }
-
-        const fetchResponse = event.detail.fetchResponse;
-        if (fetchResponse.succeeded && fetchResponse.redirected) {
-            event.preventDefault();
-            Turbo.visit(fetchResponse.location);
-        }
-    }
 }
diff --git a/assets/turbo/turbo-helper.js b/assets/turbo/turbo-helper.js
index 628a863..38b4ee0 100644
--- a/assets/turbo/turbo-helper.js
+++ b/assets/turbo/turbo-helper.js
@@ -1,4 +1,5 @@
 import { Modal } from 'bootstrap';
+import * as Turbo from '@hotwired/turbo';
 
 const TurboHelper = class {
     constructor() {
@@ -14,6 +15,10 @@ const TurboHelper = class {
             submitter.classList.add('turbo-submit-disabled');
         })
 
+        document.addEventListener('turbo:before-fetch-response', (event) => {
+            this.beforeFetchResponse(event);
+        });
+
         this.initializeTransitions();
     }
 
@@ -95,6 +100,18 @@ const TurboHelper = class {
             button.classList.remove('turbo-submit-disabled');
         });
     }
+
+    beforeFetchResponse(event) {
+        if (!this.modal || !this.modal._isShown) {
+            return;
+        }
+
+        const fetchResponse = event.detail.fetchResponse;
+        if (fetchResponse.succeeded && fetchResponse.redirected) {
+            event.preventDefault();
+            Turbo.visit(fetchResponse.location);
+        }
+    }
 }
 
 export default new TurboHelper();
